"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SynthesizeSpeechOutputFilterSensitiveLog = exports.SynthesizeSpeechInputFilterSensitiveLog = exports.StartSpeechSynthesisTaskOutputFilterSensitiveLog = exports.StartSpeechSynthesisTaskInputFilterSensitiveLog = exports.PutLexiconOutputFilterSensitiveLog = exports.PutLexiconInputFilterSensitiveLog = exports.ListSpeechSynthesisTasksOutputFilterSensitiveLog = exports.ListSpeechSynthesisTasksInputFilterSensitiveLog = exports.ListLexiconsOutputFilterSensitiveLog = exports.ListLexiconsInputFilterSensitiveLog = exports.LexiconDescriptionFilterSensitiveLog = exports.GetSpeechSynthesisTaskOutputFilterSensitiveLog = exports.SynthesisTaskFilterSensitiveLog = exports.GetSpeechSynthesisTaskInputFilterSensitiveLog = exports.GetLexiconOutputFilterSensitiveLog = exports.LexiconAttributesFilterSensitiveLog = exports.LexiconFilterSensitiveLog = exports.GetLexiconInputFilterSensitiveLog = exports.DescribeVoicesOutputFilterSensitiveLog = exports.VoiceFilterSensitiveLog = exports.DescribeVoicesInputFilterSensitiveLog = exports.DeleteLexiconOutputFilterSensitiveLog = exports.DeleteLexiconInputFilterSensitiveLog = exports.TextLengthExceededException = exports.SsmlMarksNotSupportedForTextTypeException = exports.UnsupportedPlsLanguageException = exports.UnsupportedPlsAlphabetException = exports.MaxLexiconsNumberExceededException = exports.MaxLexemeLengthExceededException = exports.MarksNotSupportedForFormatException = exports.LexiconSizeExceededException = exports.LanguageNotSupportedException = exports.InvalidSsmlException = exports.InvalidSnsTopicArnException = exports.InvalidSampleRateException = exports.InvalidS3KeyException = exports.InvalidS3BucketException = exports.InvalidLexiconException = exports.SynthesisTaskNotFoundException = exports.InvalidTaskIdException = exports.TextType = exports.TaskStatus = exports.SpeechMarkType = exports.OutputFormat = exports.EngineNotSupportedException = exports.InvalidNextTokenException = exports.Engine = exports.ServiceFailureException = exports.LexiconNotFoundException = void 0;
const smithy_client_1 = require("@aws-sdk/smithy-client");
const PollyServiceException_1 = require("./PollyServiceException");
class LexiconNotFoundException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "LexiconNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "LexiconNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LexiconNotFoundException.prototype);
    }
}
exports.LexiconNotFoundException = LexiconNotFoundException;
class ServiceFailureException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "ServiceFailureException",
            $fault: "server",
            ...opts,
        });
        this.name = "ServiceFailureException";
        this.$fault = "server";
        Object.setPrototypeOf(this, ServiceFailureException.prototype);
    }
}
exports.ServiceFailureException = ServiceFailureException;
var Engine;
(function (Engine) {
    Engine["NEURAL"] = "neural";
    Engine["STANDARD"] = "standard";
})(Engine = exports.Engine || (exports.Engine = {}));
class InvalidNextTokenException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "InvalidNextTokenException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidNextTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidNextTokenException.prototype);
    }
}
exports.InvalidNextTokenException = InvalidNextTokenException;
class EngineNotSupportedException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "EngineNotSupportedException",
            $fault: "client",
            ...opts,
        });
        this.name = "EngineNotSupportedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, EngineNotSupportedException.prototype);
    }
}
exports.EngineNotSupportedException = EngineNotSupportedException;
var OutputFormat;
(function (OutputFormat) {
    OutputFormat["JSON"] = "json";
    OutputFormat["MP3"] = "mp3";
    OutputFormat["OGG_VORBIS"] = "ogg_vorbis";
    OutputFormat["PCM"] = "pcm";
})(OutputFormat = exports.OutputFormat || (exports.OutputFormat = {}));
var SpeechMarkType;
(function (SpeechMarkType) {
    SpeechMarkType["SENTENCE"] = "sentence";
    SpeechMarkType["SSML"] = "ssml";
    SpeechMarkType["VISEME"] = "viseme";
    SpeechMarkType["WORD"] = "word";
})(SpeechMarkType = exports.SpeechMarkType || (exports.SpeechMarkType = {}));
var TaskStatus;
(function (TaskStatus) {
    TaskStatus["COMPLETED"] = "completed";
    TaskStatus["FAILED"] = "failed";
    TaskStatus["IN_PROGRESS"] = "inProgress";
    TaskStatus["SCHEDULED"] = "scheduled";
})(TaskStatus = exports.TaskStatus || (exports.TaskStatus = {}));
var TextType;
(function (TextType) {
    TextType["SSML"] = "ssml";
    TextType["TEXT"] = "text";
})(TextType = exports.TextType || (exports.TextType = {}));
class InvalidTaskIdException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "InvalidTaskIdException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidTaskIdException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidTaskIdException.prototype);
    }
}
exports.InvalidTaskIdException = InvalidTaskIdException;
class SynthesisTaskNotFoundException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "SynthesisTaskNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "SynthesisTaskNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, SynthesisTaskNotFoundException.prototype);
    }
}
exports.SynthesisTaskNotFoundException = SynthesisTaskNotFoundException;
class InvalidLexiconException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "InvalidLexiconException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidLexiconException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidLexiconException.prototype);
    }
}
exports.InvalidLexiconException = InvalidLexiconException;
class InvalidS3BucketException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "InvalidS3BucketException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidS3BucketException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidS3BucketException.prototype);
    }
}
exports.InvalidS3BucketException = InvalidS3BucketException;
class InvalidS3KeyException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "InvalidS3KeyException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidS3KeyException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidS3KeyException.prototype);
    }
}
exports.InvalidS3KeyException = InvalidS3KeyException;
class InvalidSampleRateException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "InvalidSampleRateException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidSampleRateException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidSampleRateException.prototype);
    }
}
exports.InvalidSampleRateException = InvalidSampleRateException;
class InvalidSnsTopicArnException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "InvalidSnsTopicArnException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidSnsTopicArnException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidSnsTopicArnException.prototype);
    }
}
exports.InvalidSnsTopicArnException = InvalidSnsTopicArnException;
class InvalidSsmlException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "InvalidSsmlException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidSsmlException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidSsmlException.prototype);
    }
}
exports.InvalidSsmlException = InvalidSsmlException;
class LanguageNotSupportedException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "LanguageNotSupportedException",
            $fault: "client",
            ...opts,
        });
        this.name = "LanguageNotSupportedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LanguageNotSupportedException.prototype);
    }
}
exports.LanguageNotSupportedException = LanguageNotSupportedException;
class LexiconSizeExceededException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "LexiconSizeExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LexiconSizeExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LexiconSizeExceededException.prototype);
    }
}
exports.LexiconSizeExceededException = LexiconSizeExceededException;
class MarksNotSupportedForFormatException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "MarksNotSupportedForFormatException",
            $fault: "client",
            ...opts,
        });
        this.name = "MarksNotSupportedForFormatException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MarksNotSupportedForFormatException.prototype);
    }
}
exports.MarksNotSupportedForFormatException = MarksNotSupportedForFormatException;
class MaxLexemeLengthExceededException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "MaxLexemeLengthExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "MaxLexemeLengthExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MaxLexemeLengthExceededException.prototype);
    }
}
exports.MaxLexemeLengthExceededException = MaxLexemeLengthExceededException;
class MaxLexiconsNumberExceededException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "MaxLexiconsNumberExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "MaxLexiconsNumberExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MaxLexiconsNumberExceededException.prototype);
    }
}
exports.MaxLexiconsNumberExceededException = MaxLexiconsNumberExceededException;
class UnsupportedPlsAlphabetException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "UnsupportedPlsAlphabetException",
            $fault: "client",
            ...opts,
        });
        this.name = "UnsupportedPlsAlphabetException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedPlsAlphabetException.prototype);
    }
}
exports.UnsupportedPlsAlphabetException = UnsupportedPlsAlphabetException;
class UnsupportedPlsLanguageException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "UnsupportedPlsLanguageException",
            $fault: "client",
            ...opts,
        });
        this.name = "UnsupportedPlsLanguageException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedPlsLanguageException.prototype);
    }
}
exports.UnsupportedPlsLanguageException = UnsupportedPlsLanguageException;
class SsmlMarksNotSupportedForTextTypeException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "SsmlMarksNotSupportedForTextTypeException",
            $fault: "client",
            ...opts,
        });
        this.name = "SsmlMarksNotSupportedForTextTypeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, SsmlMarksNotSupportedForTextTypeException.prototype);
    }
}
exports.SsmlMarksNotSupportedForTextTypeException = SsmlMarksNotSupportedForTextTypeException;
class TextLengthExceededException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "TextLengthExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "TextLengthExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TextLengthExceededException.prototype);
    }
}
exports.TextLengthExceededException = TextLengthExceededException;
const DeleteLexiconInputFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DeleteLexiconInputFilterSensitiveLog = DeleteLexiconInputFilterSensitiveLog;
const DeleteLexiconOutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DeleteLexiconOutputFilterSensitiveLog = DeleteLexiconOutputFilterSensitiveLog;
const DescribeVoicesInputFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DescribeVoicesInputFilterSensitiveLog = DescribeVoicesInputFilterSensitiveLog;
const VoiceFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.VoiceFilterSensitiveLog = VoiceFilterSensitiveLog;
const DescribeVoicesOutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DescribeVoicesOutputFilterSensitiveLog = DescribeVoicesOutputFilterSensitiveLog;
const GetLexiconInputFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.GetLexiconInputFilterSensitiveLog = GetLexiconInputFilterSensitiveLog;
const LexiconFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Content && { Content: smithy_client_1.SENSITIVE_STRING }),
});
exports.LexiconFilterSensitiveLog = LexiconFilterSensitiveLog;
const LexiconAttributesFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.LexiconAttributesFilterSensitiveLog = LexiconAttributesFilterSensitiveLog;
const GetLexiconOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Lexicon && { Lexicon: (0, exports.LexiconFilterSensitiveLog)(obj.Lexicon) }),
});
exports.GetLexiconOutputFilterSensitiveLog = GetLexiconOutputFilterSensitiveLog;
const GetSpeechSynthesisTaskInputFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.GetSpeechSynthesisTaskInputFilterSensitiveLog = GetSpeechSynthesisTaskInputFilterSensitiveLog;
const SynthesisTaskFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.SynthesisTaskFilterSensitiveLog = SynthesisTaskFilterSensitiveLog;
const GetSpeechSynthesisTaskOutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.GetSpeechSynthesisTaskOutputFilterSensitiveLog = GetSpeechSynthesisTaskOutputFilterSensitiveLog;
const LexiconDescriptionFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.LexiconDescriptionFilterSensitiveLog = LexiconDescriptionFilterSensitiveLog;
const ListLexiconsInputFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ListLexiconsInputFilterSensitiveLog = ListLexiconsInputFilterSensitiveLog;
const ListLexiconsOutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ListLexiconsOutputFilterSensitiveLog = ListLexiconsOutputFilterSensitiveLog;
const ListSpeechSynthesisTasksInputFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ListSpeechSynthesisTasksInputFilterSensitiveLog = ListSpeechSynthesisTasksInputFilterSensitiveLog;
const ListSpeechSynthesisTasksOutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ListSpeechSynthesisTasksOutputFilterSensitiveLog = ListSpeechSynthesisTasksOutputFilterSensitiveLog;
const PutLexiconInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Content && { Content: smithy_client_1.SENSITIVE_STRING }),
});
exports.PutLexiconInputFilterSensitiveLog = PutLexiconInputFilterSensitiveLog;
const PutLexiconOutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.PutLexiconOutputFilterSensitiveLog = PutLexiconOutputFilterSensitiveLog;
const StartSpeechSynthesisTaskInputFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.StartSpeechSynthesisTaskInputFilterSensitiveLog = StartSpeechSynthesisTaskInputFilterSensitiveLog;
const StartSpeechSynthesisTaskOutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.StartSpeechSynthesisTaskOutputFilterSensitiveLog = StartSpeechSynthesisTaskOutputFilterSensitiveLog;
const SynthesizeSpeechInputFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.SynthesizeSpeechInputFilterSensitiveLog = SynthesizeSpeechInputFilterSensitiveLog;
const SynthesizeSpeechOutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.SynthesizeSpeechOutputFilterSensitiveLog = SynthesizeSpeechOutputFilterSensitiveLog;
